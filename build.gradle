plugins {
    id 'idea'
    id 'java'


    id "pmd"
    id "jacoco"
    id "checkstyle"
    id "project-report"

    alias libs.plugins.spotless
    alias libs.plugins.spotbugs
    alias libs.plugins.sonarqube
    alias libs.plugins.dependency.check
    alias libs.plugins.smart.doc
}

group = "com.newnoa"
version hasProperty("VERSION") ? property("VERSION") : "1.0.0"
println "version: ${version}"
ext.env = hasProperty("env") ? property("env") : null
println "${project.name} env: ${env}"
ext.neo4jEmbedded = hasProperty("neo4jEmbedded") ? property("neo4jEmbedded") : 'true'

allprojects {
    apply plugin: "idea"
    apply plugin: "java"

    if (env == 'dev' || env == 'sit') {
        apply plugin: "org.owasp.dependencycheck"
        apply from: rootProject.file("gradle/spotless.gradle")
        apply from: rootProject.file("gradle/checkstyle.gradle")
        apply from: rootProject.file("gradle/pmd.gradle")
        apply from: rootProject.file("gradle/spotbugs.gradle")
        apply from: rootProject.file("gradle/jacoco.gradle")
        apply from: rootProject.file("gradle/sonarqube.gradle")
        apply from: rootProject.file("gradle/smart-doc.gradle")
    }

    repositories {
        maven {
            url "http://nexus.newnoa.com/repository/newnoa/"
            allowInsecureProtocol = true
        }
    }

    dependencies {
        implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
        implementation "io.quarkus:quarkus-arc"
        implementation "io.quarkus:quarkus-opentelemetry"
        testImplementation "io.quarkus:quarkus-junit5"
        testImplementation "io.rest-assured:rest-assured"
    }

    test {
        systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs.add("-Xlint:unchecked")
        options.compilerArgs.add("-Xlint:deprecation")
        options.compilerArgs.add("--enable-preview")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.reflect.generics.tree=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.base/sun.net.www.protocol.ftp=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.awt=ALL-UNNAMED")
        options.compilerArgs.add("--add-exports=java.desktop/sun.font=ALL-UNNAMED")
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }
}